pipeline {
    agent any
    environment{
        DOCKER_TAG=getDockerTag()
        
    }
    stages{
        stage('Build Docker Image'){
            steps{
			    sshagent(['kube']) {
                sh "scp -o StrictHostKeyChecking=no apache_dockerfile vm-user@35.185.164.230:/home/vm-user/"
				sh "scp -o StrictHostKeyChecking=no index.html vm-user@35.185.164.230:/home/vm-user/"
				sh "ssh vm-user@35.185.164.230 sudo docker build -f /home/vm-user/ -t bapisahoo/mynginx:${DOCKER_TAG} apache_dockerfile"
                }
               
            }
        }
		stage('Docker Hub Push'){
		    steps{
			    sshagent(['kube']) {
                              
			    withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPasswd')]) {
				      sh "ssh vm-user@35.185.164.230 sudo docker login -u bapisahoo -p${dockerHubPasswd}"
					  sh "ssh vm-user@35.185.164.230 sudo docker push bapisahoo/mynginx:${DOCKER_TAG}"
                                          }
			    }
			}
		}
		stage('deploy to K8s'){
		    steps{
			    sh "chmod 777 changeTag.sh"
				sh "./changeTag.sh ${DOCKER_TAG}"
			    sshagent(['kube']) {
                       sh "scp -o StrictHostKeyChecking=no node-app-pod.yml vm-user@34.80.195.215:/home/vm-user/"   
                           script{
						       try{
							     sh "ssh vm-user@34.80.195.215 kubectl apply -f node-app-pod.yml"
							   }catch(error){
							    sh "ssh vm-user@34.80.195.215 kubectl create -f node-app-pod.yml"
							   }
                             } 						   
			    
			    }
			}
		}
        
        
    }
}
	
	def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
     }



